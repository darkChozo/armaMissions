

class cfgNotifications
{
	// Notification Template
	class Template
	{
		title = ""; // Tile displayed as text on black background. Filled by arguments.
		iconPicture = ""; // Small icon displayed in left part. Colored by "color", filled by arguments.
		iconText = ""; // Short text displayed over the icon. Colored by "color", filled by arguments.
		description = ""; // Brief description displayed as structured text. Colored by "color", filled by arguments.
		color[] = {1,1,1,1}; // Icon and text color
		duration = 5; // How many seconds will the notification be displayed
		priority = 0; // Priority; higher number = more important; tasks in queue are selected by priority
		difficulty[] = {}; // Required difficulty settings. All listed difficulties has to be enabled
	};

	// A generic warning notification
	class Alert
	{
		title = "ALERT";
		description = "%1";
		iconPicture="\A3\ui_f\data\map\markers\military\warning_ca.paa";
		duration = 3;
		priority = 9;
	};
};


#include "defines.hpp"

class StaticText {
	idc = -1;              // set to -1, unneeded
	moving = 0;            // left click (and hold) this control to move the dialog
						   // (requires "movingEnabled" to be 1, see above)
	type = CT_STATIC;      // constant
	style = ST_CENTER;       // constant
	font = PuristaMedium;
	sizeEx = 0.05;

	colorBackground[] = { .8, .8, .8, 0 };
	colorText[] = { 0, 0, 0, 1 };

	x = .25; y = .1;
	w = .2; h = .085;
};

class Button {
	idc = -1;
	moving = 0;
	type = CT_BUTTON;
	style = ST_CENTER; 

	colorShadow[] = {.2,.2,.2,.6};
	offsetX = .003;
	offsetY = .003;
	offsetPressedX = .002;
	offsetPressedY = .002;
			
	soundEnter[] = {"",0.1,1};
	soundPush[] = {"",0.1,1};
	soundClick[] = {"",0.1,1};
	soundEscape[] = {"",0.1,1};
};

class ListBox {
	idc = -1;
	moving = 0;

	type = 5;
	style = 0;
	access = 0;
	font = "TahomaB";
	sizeEx = 0.04;
	rowHeight = 0;
	colorText[] = {1,1,1,1};
	colorScrollbar[] = {1,1,1,1};
	colorSelect[] = {.9,0,0,1};
	colorSelect2[] = {.9,0,0,1};
	colorSelectBackground[] = {0.3,0.3,0.3,1};
	colorSelectBackground2[] = {0.3,0.3,0.3,1};
	colorDisabled[] = {0.2,0.2,0.2,1};
	colorBackground[] = {0,0,0,1};
	maxHistoryDelay = 1.0;
	soundSelect[] = {"",0.1,1};
	period = 1;
	autoScrollSpeed = -1;
	autoScrollDelay = 5;
	autoScrollRewind = 0;
	arrowEmpty = "#(argb,8,8,3)color(1,1,1,1)";
	arrowFull = "#(argb,8,8,3)color(1,1,1,1)";
	shadow = 0;
	class ListScrollBar //ListScrollBar is class name required for Arma 3
	{
		color[] = {1,1,1,0.6};
		colorActive[] = {1,1,1,1};
		colorDisabled[] = {1,1,1,0.3};
		thumb = "#(argb,8,8,3)color(1,1,1,1)";
		arrowEmpty = "#(argb,8,8,3)color(1,1,1,1)";
		arrowFull = "#(argb,8,8,3)color(1,1,1,1)";
		border = "#(argb,8,8,3)color(1,1,1,1)";
		shadow = 0;
	};
};


class ConfigDialog {
	idd = -1;                      // set to -1, because we don't require a unique ID
	movingEnable = false;           // the dialog can be moved with the mouse (see "moving" below)
	enableSimulation = false;      // freeze the game
	
	class controlsBackground {
		class background {
			idc = -1;              // set to -1, unneeded
			moving = 0;            // left click (and hold) this control to move the dialog
								   // (requires "movingEnabled" to be 1, see above)
			type = CT_STATIC;      // constant
			style = 80;       // constant
			text = "";
			font = PuristaMedium;
			sizeEx = 0.023;
			
			shadow = 2;

			colorBackground[] = { .6, .6, .6, .7 };
			colorText[] = { .9, .9, .9, 1 };

			x = 0; y = 0;
			w = 1; h = 1;
		};
	}
	
	class controls {
		class ExitButton:Button {
			x = .02; y = .02;
			w = .0375; h = .05;
			
			action = "closeDialog 0";

			text = "X";
			font = PuristaMedium;
			sizeEx = .045;
			colorText[] = { 0, 0, 0, 1 };
			colorDisabled[] = {0,0,0,1};

			colorBackground[] = { .8, 0, 0, 1 };
			colorBackgroundActive[] = {.9,0,0,1};
			colorBackgroundDisabled[] = {.4,.4,.4,1};
			colorFocused[] = {.8,0,0,1};

			borderSize = 0;
			colorBorder[] = {0,0,0,0};
		};

		
		class HeliSelectTitle {
			idc = -1;              // set to -1, unneeded
			moving = 0;            // left click (and hold) this control to move the dialog
								   // (requires "movingEnabled" to be 1, see above)
			type = CT_STATIC;      // constant
			style = ST_CENTER;       // constant
			text = "Helicopter";
			font = PuristaMedium;
			sizeEx = 0.05;

			colorBackground[] = { .8, .8, .8, 0 };
			colorText[] = { 0, 0, 0, 1 };

			x = .02; y = .1;
			w = .2; h = .085;
		};

		class HeliSelect:ListBox {

			x = .02;
			y = .2;
			w = 0.2;
			h = 0.4;
			onLoad="{_this select 0 lbAdd _x;} forEach helicopterTypeNames; _this select 0 lbSetCurSel helicopterType;"
			onLBSelChanged="helicopterType = _this select 1;";
			onDestroy="call chooseNewLz; call respawnHelo;";
		};
		
		class DifficultyTitle:StaticText {
			text = "LZ Difficulty";
			x = .25; y = .1;
			w = .2; h = .085;
		};
		
		class DifficultyEasyText:StaticText {
			style=ST_RIGHT;
			text = "Easy";
			x = .25; y = .19;
			w = .13; h = .085;
		};

		class DifficultyEasy:RscCheckBox {
			x = .38; y = .2;
			w = .05; h = .064;
			
			onLoad="_this select 0 cbSetChecked (lzDifficulties select 0)";
			onCheckedChanged="lzDifficulties set [0,cbChecked (_this select 0)]";
			
			tooltip="Easy difficulty LZs are in wide-open areas with few obstacles."
		};
		
		class DifficultyMediumText:StaticText {
			style=ST_RIGHT;
			text = "Medium";
			x = .25; y = .26;
			w = .13; h = .085;
		};

		class DifficultyMedium:RscCheckBox {
			x = .38; y = .27;
			w = .05; h = .064;
			
			onLoad="_this select 0 cbSetChecked (lzDifficulties select 1)";
			onCheckedChanged="lzDifficulties set [1,cbChecked (_this select 0)]";
			
			tooltip="Medium difficulty LZs are in enclosed areas or in areas with obstacles. Some may be quite difficult for larger helicopters."
		};
		
		class DifficultyHardText:StaticText {
			style=ST_RIGHT;
			text = "Hard";
			x = .25; y = .33;
			w = .13; h = .085;
		};

		class DifficultyHard:RscCheckBox {
			x = .38; y = .34;
			w = .05; h = .064;
			
			onLoad="_this select 0 cbSetChecked (lzDifficulties select 2)";
			onCheckedChanged="lzDifficulties set [2,cbChecked (_this select 0)]";
			
			tooltip="Hard difficulty LZs are in extremely tight areas. These LZs may be impossible for large helicopters."
		};
		
		class MiscTitle:StaticText {
			text = "Other Settings";
			x = .5; y = .1;
			w = .25; h = .085;
		};
		
		class SmokeText:StaticText {
			style=ST_RIGHT;
			text = "Smoke on LZ";
			x = .5; y = .19;
			w = .18; h = .085;
		};

		class Smoke:RscCheckBox {
			x = .68; y = .2;
			w = .05; h = .064;
			
			onLoad="_this select 0 cbSetChecked smokeOnLZ";
			onCheckedChanged="smokeOnLZ = cbChecked (_this select 0)";
			
			tooltip="Enable/disable green smoke on the current LZ."
		};
		
		class ArrowText:StaticText {
			style=ST_RIGHT;
			text = "GPS Arrow";
			x = .5; y = .26;
			w = .18; h = .085;
		};

		class Arrow:RscCheckBox {
			x = .68; y = .27;
			w = .05; h = .064;
			
			onLoad="_this select 0 cbSetChecked arrowEnabled";
			onCheckedChanged="arrowEnabled = cbChecked (_this select 0)";
			
			tooltip="Enable/disable the arrow on the GPS that points to your current LZ."
		};
	};
};